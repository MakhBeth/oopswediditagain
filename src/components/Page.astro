---
import '@fontsource/wellfleet';
import '@fontsource/twinkle-star';
import Layout, { Props } from '../components/Layout.astro';
import Flying from '../components/Flying.astro';
import Cloud from '../components/Cloud.astro';
import Cloudette from "./Cloudette.astro"
import Star from "./Star.astro"

const { title, content } = Astro.props as Props;
const born = {
	day: undefined,
	height: undefined,
	weigth: undefined
}
---
<Layout title={title} content={content}>
	<main>
		<div class="illustration">
			<div id="scene">
				<div data-depth="1">
					<Cloud />
				</div>
				<div data-depth="3">
					<Cloudette className="cloud minions stroke two" />
				</div>
				<div data-depth="2">
					<Cloudette className="cloud minions fill one" />
				</div>
				<div data-depth="4">
					<Star className="star minions fill one" />
				</div>
				<div data-depth="1.5">
					<Star className="star minions stroke two" />
				</div>
				<div data-depth="5">
					<Star className="star minions fill three" />
				</div>
				<div data-depth="3">
					<Star className="star minions stroke four" />
				</div>
				<div data-depth="2">
					<Star className="star minions fill five" />
				</div>
				<div data-depth="5">
					<Star className="star minions stroke six" />
				</div>
				<div data-depth="2">
					<Cloudette className="cloud minions stroke four" />
				</div>
				<div data-depth="3">
					<Cloudette className="cloud minions fill three" />
				</div>
				<div data-depth="3">
					<Cloudette className="cloud minions fill five" />
				</div>
			</div>
			<Flying />
		</div>
		{!born.day ? <h1><slot name="h1" /></h1> : <h1><slot name="born" /></h1>}
    <slot />
	</main>
</Layout>

<style>
	@keyframes rotate {
		100%{
			transform: rotate(360deg);
		}
	}
	@keyframes float {
		100%{
			transform: translateX(-10%);
		}
	}
	h1 {
		font-family: "Twinkle Star", cursive;
		color: var(--secondary);
		text-align: center;
		padding: 0.5em;
		text-wrap: balance;
		font-size: 2.4rem;
	}

	main {
    display: grid;
    grid-template-rows: repeat(3, max-content);
		max-width: 100%;
	}
 
	.illustration {
		position: relative;
		padding: 0 5vw;
		max-width: 100%;
	}

	/* calc((100vw - 100%) / 2 + 100%) */
	.minions {
		position: absolute;
		--dimension: clamp(calc(var(--size) * 0.5em), calc(var(--size) * 2vw) ,calc(var(--size) * 1em));
		width: var(--dimension);
		height: var(--dimension);
		left: calc(100vw - 100%);
		filter: drop-shadow(1px 1px 0px var(--primary));
	}


	.star {
		--size: 2.5;
		--timing: 20s;
		--direction: normal;
		animation: rotate var(--timing) linear infinite var(--direction);
	}

	.cloud {
		--size: 10;
		--timing: 10s;
		--direction: alternate;
		animation: float var(--timing) linear infinite var(--direction);
		animation-timing-function: ease-in-out;
		height: calc(var(--size) / 2);
	}

	.star.one {
		--size: 1.5;
		top: 0;
		left: 19%;
	}

	.star.two {
		--size: 2.5;
		--timing: 42s;
		--direction: alternate;
		top: -10%;
		left: 14%;
	}

	.star.three {
		--size: 2.5;
		--timing: 52s;
		--direction: reverse;
		top: 30%;
		left: 98%;
	}
	.star.six {
		--size: 2;
		--timing: 52s;
		--direction: reverse;
		top: 36%;
		left: 105%;
	}

	.star.four {
		--size: 1.5;
		left: 60%;
		top: 0%;
	}

	.star.five {
		--size: 2;
    left: 65%;
    top: -5%;
	}

	.cloud.one {
    left: 94%;
    bottom: 5%;
		--direction: alternate-reverse;
	}
	.cloud.two {
		--size: 8;
    left: 89%;
    bottom: 5%;
	}

	.cloud.three {
    --size: 8;
    left: -24%;
    bottom: 25%;
		--timing: 20s;
	}
	.cloud.four {
		--size: 7;
    left: -10%;
    bottom: 35%;
	}

	.cloud.five {
    left: 65%;
		top: -1%;
		--timing: 4s;
	}

	.fill {
		fill: var(--bcg);
	}

	.stroke {
		stroke-width: 3px;
		stroke: var(--bcg);
		fill: transparent;
	}

	#scene, #scene div {
		position: absolute !important;
		width: 100%;
		height: 100%;
		z-index: -1;
	}
</style>

<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/parallax/3.1.0/parallax.min.js" />
<script is:inline defer>
	const scene = document.getElementById('scene');
	const parallaxInstance = new Parallax(scene);
</script>
