---
import { getLangFromUrl } from "../i18n/utils"
const isDev = import.meta.env.MODE === "development"
const appId = isDev ? "a24cfac6-181d-4af0-8f94-ad4493b2ee4c" : "58597594-372f-40e7-b23b-40c96abf1fee"
const safari_web_id = isDev ? "web.onesignal.auto.276b1587-9df2-49f1-886b-c818bd2e0d3c" : "web.onesignal.auto.528b6caf-1e6b-4608-b4e6-faa03f146a9c"
const lang = getLangFromUrl(Astro.url);
---

<astro-onesignal 
	data-env={import.meta.env.MODE} 
	data-appId={appId}
	data-safari_web_id={safari_web_id}
	lang={lang}
>
	<button	aria-hidden="true">{lang === "en" ? "Subscribe" : "Notificami"}</button>

	<dialog>
		<p>
			{lang === 'it' && "Purtroppo o per fortuna sembra che tu abbia un iPhone/iPad. Se proprio vuoi le notifiche su questo dispositivo, devi prima cliccare sull'icona"}
			{lang === 'en' && 'Unfortunately or fortunately, it seems that you have an iPhone/iPad. If you really want notifications on this device, you must first click on the'}
			<img src="/iosadd.png" alt={lang==="it" ? "Opzioni" : "Options"} />
			{lang === 'it' && 'e aggiungere questo sito alla tua schermata Home. Poi puoi aprirlo dalla Home del tuo device e finalmente ricliccare su Notificami e abilitarle. Sembra quasi che Apple faccia di tutto per rendere questo processo tedioso. Però poi potrai felicemente ricevere una o forse due notifiche!'}
			{lang === 'en' && "and add this site to your Home screen. Then, you can open it from your device's Home screen and finally click on 'Notify Me' to enable notifications. It almost seems like Apple does everything to make this process tedious. However, afterwards, you can happily receive one or maybe two notifications!"}
		</p>
		<p>{lang === 'it' && 'Se non hai un dispositivo iOS e vedi questo messaggio, abbiamo un problema!'}</p>
		<p>{lang === 'en' && "If you don't have an iOS device and you see this message, we have a problem!"}</p>
		<form method="dialog">
			<button>OK</button>
		</form>
	</dialog>
</astro-onesignal>

<style>
	dialog {
		font-family: "Wellfleet", cursive;
		width: 38rem;
		max-width: calc(100% - 2rem);
		color: var(--secondary);
		border: 1px solid var(--primary);
		border-radius: 1em;
		font-size: 0.8rem;
	}

	img {
		max-width: 1em;
		transform: translateY(10%);
	}

	button {
		all: unset;
		font-family: "Wellfleet", cursive;
		cursor: pointer;
		display: inline-block;
		margin: 0 auto;
		text-align: center;
		color: #9cd8d6;
		background-color: white;
		padding: 0.5em 1em;
		font-size: 1.2rem;

		&:hover, &:focus-visible {
			box-shadow: 1px 1px 2px rgba(0,0,0,0.2);
		}

		&[disabled] {
			opacity: 0.5;
		}
		&[aria-hidden="true"] {
			display: none;
		}
	}
</style>

<script is:inline src="https://cdn.onesignal.com/sdks/web/v16/OneSignalSDK.page.js" defer></script>
<script is:inline>
	const isIos = () => {
		const userAgent = window.navigator.userAgent.toLowerCase();
		return /iphone|ipad|ipod/.test( userAgent );
	}
	const isInStandaloneMode = () => ('standalone' in window.navigator) && (window.navigator.standalone);

	class Onesignal extends HTMLElement {
		constructor() {
			super();
			const { lang, env, safari_web_id, appid: appId } = this.dataset;
			const subscribeText = lang === "en" ? "Subscribe" : "Notificami"
			const subscribedText = lang === "en" ? "Subscribed" : "Notificherò"
			const isDev = env === "development"

			if (isIos() && !isInStandaloneMode()) {
				const subscribe = this.querySelector("button");
				subscribe.ariaHidden = false;
				const dialog = this.querySelector("dialog");

				subscribe.addEventListener("click", () => {
					dialog.showModal();
				})
			} else {
				window.OneSignalDeferred = window.OneSignalDeferred || [];
				OneSignalDeferred.push((OneSignal) => {
					OneSignal.init({
						appId,
						safari_web_id,
						allowLocalhostAsSecureOrigin: isDev,
					});
					let granted = window?.Notification?.permission === "granted";
					const subscribe = this.querySelector("button");
					subscribe.ariaHidden = false;
					subscribe.addEventListener("click", () => {
						if(granted) return
						OneSignal.Notifications.requestPermission();
					})
					subscribe.disabled = granted
					if(granted) {
						subscribe.textContent = subscribedText
					}
					OneSignal.User.PushSubscription.addEventListener("change", ({ current }) => {
						subscribe.textContent = current.optedIn ? subscribedText : subscribeText
						granted = current.optedIn
						subscribe.disabled = granted
					});
				});
			}
		}
	}

	// Tell the browser to use our AstroHeart class for <astro-heart> elements.
	customElements.define('astro-onesignal', Onesignal);
</script>
